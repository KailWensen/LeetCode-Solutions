        import java.util.Stack;
class Solution {
    public String smallestSubsequence(String s) {

        int[] count = new int[26]; // Count the frequency of each character
        boolean[] inStack = new boolean[26]; // Keep track of characters in the stack
        Stack<Character> stack = new Stack<>();

        // Count character frequencies
        for (char ch : s.toCharArray()) {
            count[ch - 'a']++;
        }

        for (char ch : s.toCharArray()) {
            count[ch - 'a']--; // Decrement the count for the current character

            if (inStack[ch - 'a']) {
                continue; // Skip characters already in the stack
            }

            // Pop characters from the stack if they are greater and there are more of them ahead
            while (!stack.isEmpty() && ch < stack.peek() && count[stack.peek() - 'a'] > 0) {
                inStack[stack.pop() - 'a'] = false;
            }

            stack.push(ch);
            inStack[ch - 'a'] = true;
        }

        // Build the result string
        StringBuilder result = new StringBuilder();
        for (char ch : stack) {
            result.append(ch);
        }

        return result.toString();
    }
}

        
    
